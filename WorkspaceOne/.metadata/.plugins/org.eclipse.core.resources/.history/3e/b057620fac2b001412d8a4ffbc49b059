package com.sreenivas.fewminuteseveryday;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Locale;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.ActionBar;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.FragmentPagerAdapter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.view.ViewPager;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class MainActivity extends ActionBarActivity {

	/**
	 * The {@link android.support.v4.view.PagerAdapter} that will provide
	 * fragments for each of the sections. We use a {@link FragmentPagerAdapter}
	 * derivative, which will keep every loaded fragment in memory. If this
	 * becomes too memory intensive, it may be best to switch to a
	 * {@link android.support.v4.app.FragmentStatePagerAdapter}.
	 */
	SectionsPagerAdapter mSectionsPagerAdapter;

	/**
	 * The {@link ViewPager} that will host the section contents.
	 */
	ViewPager mViewPager;
	
	public final static String calvinhobbesurl = "http://calvinhobbesdaily.tumblr.com/rss";
	public final static String dilberturl = "http://feed.dilbert.com/dilbert/daily_strip?format=xml";
	public final static String quotesurl = "http://feeds.feedburner.com/inspirational_quotes";
	public final static String nasaurl = "http://apod.nasa.gov/apod.rss";
	public final static String spaceurl = "http://www.space.com/home/feed/site.xml"; 

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		// Create the adapter that will return a fragment for each of the three
		// primary sections of the activity.
		mSectionsPagerAdapter = new SectionsPagerAdapter(
				getSupportFragmentManager());

		// Set up the ViewPager with the sections adapter.
		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(mSectionsPagerAdapter);

	}

	/**
	 * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
	 * one of the sections/tabs/pages.
	 */
	public class SectionsPagerAdapter extends FragmentPagerAdapter {

		public SectionsPagerAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public Fragment getItem(int position) {
			// getItem is called to instantiate the fragment for the given page.
			// Return a PlaceholderFragment (defined as a static inner class
			// below).
			switch(position){
			
			case 0:
				return FragmentCalvinHobbes.newInstance(position + 1);
			case 1:
				return FragmentDilbert.newInstance(position + 1);
			default:
				return null;
			}
			
		}

		@Override
		public int getCount() {
			// Show 3 total pages.
			return 2;
		}

		@Override
		public CharSequence getPageTitle(int position) {
			Locale l = Locale.getDefault();
			switch (position) {
			case 0:
				return getString(R.string.title_section1).toUpperCase(l);
			case 1:
				return getString(R.string.title_section2).toUpperCase(l);
			}
			return null;
		}
	}

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class FragmentCalvinHobbes extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		private static final String ARG_SECTION_NUMBER = "section_number";

		/**
		 * Returns a new instance of this fragment for the given section number.
		 */
		public static FragmentCalvinHobbes newInstance(int sectionNumber) {
			FragmentCalvinHobbes fragment = new FragmentCalvinHobbes();
			Bundle args = new Bundle();
			args.putInt(ARG_SECTION_NUMBER, sectionNumber);
			fragment.setArguments(args);
			return fragment;
		}

		public FragmentCalvinHobbes() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_calvinhobbes, container,
					false);
			
			//API Call
			
			String urlstring = calvinhobbesurl;
			new CallAPI().execute(urlstring);
			
			return rootView;
		}
	}
	
	public static class FragmentDilbert extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		private static final String ARG_SECTION_NUMBER = "section_number";

		/**
		 * Returns a new instance of this fragment for the given section number.
		 */
		public static FragmentDilbert newInstance(int sectionNumber) {
			FragmentDilbert fragment = new FragmentDilbert();
			Bundle args = new Bundle();
			args.putInt(ARG_SECTION_NUMBER, sectionNumber);
			fragment.setArguments(args);
			return fragment;
		}

		public FragmentDilbert() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_dilbert, container,
					false);
			return rootView;
		}
	}
	
	//Invoking Async Rest API call
	
	private static class CallAPI extends AsyncTask<String, Void, ResultParse> {
		 
	    @Override
	    protected ResultParse doInBackground(String... params) {
	 
	    	 String urlString=params[0]; // URL to call
	    	 
	    	 ResultParse result = null;  
	         InputStream in = null;
	   
	         // HTTP Get
	         try {
	   
	             URL url = new URL(urlString);
	   
	             HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
	   
	             in = new BufferedInputStream(urlConnection.getInputStream());
	   
	          } catch (Exception e ) {
	   
	             System.out.println(e.getMessage());
	   
	             return null;
	   
	          } 
	         
	         // Parse XML
	         XmlPullParserFactory pullParserFactory;
	      
	         try {
	           pullParserFactory = XmlPullParserFactory.newInstance();
	           XmlPullParser parser = pullParserFactory.newPullParser();
	      
	           parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
	           parser.setInput(in, null);
	           result = parseXML(parser);
	         } catch (XmlPullParserException e) {
	           e.printStackTrace();
	         } catch (IOException e) {
	           e.printStackTrace();
	         }
	   
	         return result; 
	 
	    }
	 
	    protected void onPostExecute(ResultParse result) {
	 
	    }
	    
	} // end CallAPI 
	
	//XML Parser
	
	private static ResultParse parseXML( XmlPullParser parser ) throws XmlPullParserException, IOException {
		 
	    int eventType = parser.getEventType();
	    ResultParse result = null;
	    boolean endparse = true;
	    String text = null;
	 
	    while( (eventType!= XmlPullParser.END_DOCUMENT) && endparse) {
	      String name = null;
	 
	      switch(eventType)
	      {
	        case XmlPullParser.START_TAG:
	          name = parser.getName();
	          
	          if ( name.equals("item")) {
	        	  result = new ResultParse();
	          }
	          break;
	          
	        case XmlPullParser.TEXT:
	        	text = parser.getText();
	        	break;
	        	
	        case XmlPullParser.END_TAG:
	        	name = parser.getName();
	        	if(name.equalsIgnoreCase("description"))
	        	{
	        		result.imageURL = text;
	        	}
	          break;
	       } // end switch
	 
	       eventType = parser.next();
	    } // end while
	    
	    return result;       
	}
	
	//Response parsing
	
	private static class ResultParse {
		
		public String imageURL;
		public String subject;
		
	}
	
}
